#!/usr/bin/python3
# SPDX-License-Identifier: AGPL-3.0-or-later
"""
Helper script for configuring Shadowsocks.
"""

import argparse
import json
import os
import subprocess
import sys

from plinth import action_utils
from plinth.modules import shadowsocks

SHADOWSOCKS_CONFIG_SYMLINK = '/etc/shadowsocks-libev/freedombox.json'
SHADOWSOCKS_CONFIG_ACTUAL = \
    '/var/lib/private/shadowsocks-libev/freedombox/freedombox.json'


def parse_arguments():
    """Return parsed command line arguments as dictionary."""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand', help='Sub command')

    subparsers.add_parser('setup', help='Perform initial setup steps')
    subparsers.add_parser('get-config',
                          help='Read and print JSON config to stdout')
    subparsers.add_parser('merge-config',
                          help='Merge JSON config from stdin with existing')

    # Migrations
    subparsers.add_parser(
        'migrate-1-2',
        help='Move shadowsocks config file to a secure location')

    subparsers.required = True
    return parser.parse_args()


def subcommand_setup(_):
    """Perform initial setup steps."""
    # Only client socks5 proxy is supported for now. Disable the
    # server component.
    action_utils.service_disable('shadowsocks-libev')
    if not os.path.islink(SHADOWSOCKS_CONFIG_SYMLINK):
        os.symlink(SHADOWSOCKS_CONFIG_ACTUAL, SHADOWSOCKS_CONFIG_SYMLINK)


def subcommand_get_config(_):
    """Read and print Shadowsocks configuration."""
    try:
        print(open(SHADOWSOCKS_CONFIG_SYMLINK, 'r').read())
    except Exception:
        sys.exit(1)


def subcommand_merge_config(_):
    """Configure Shadowsocks."""
    config = sys.stdin.read()
    config = json.loads(config)

    try:
        current_config = open(SHADOWSOCKS_CONFIG_SYMLINK, 'r').read()
        current_config = json.loads(current_config)
    except (OSError, json.JSONDecodeError):
        current_config = {}

    new_config = current_config
    new_config.update(config)
    new_config = json.dumps(new_config, indent=4, sort_keys=True)
    open(SHADOWSOCKS_CONFIG_SYMLINK, 'w').write(new_config)

    action_utils.service_restart(shadowsocks.managed_services[0])


def subcommand_migrate_1_2(_):
    """Move shadowsocks config file to a secure location."""
    if os.path.isfile(SHADOWSOCKS_CONFIG_SYMLINK):  # ignoring symlinks
        os.makedirs('/var/lib/private/shadowsocks-libev/freedombox/',
                    exist_ok=True)
        os.replace(SHADOWSOCKS_CONFIG_SYMLINK, SHADOWSOCKS_CONFIG_ACTUAL)
        os.symlink(SHADOWSOCKS_CONFIG_ACTUAL, SHADOWSOCKS_CONFIG_SYMLINK)

    subprocess.check_call(['systemctl', 'daemon-reload'])
    action_utils.service_restart(shadowsocks.managed_services[0])


def main():
    """Parse arguments and perform all duties."""
    arguments = parse_arguments()

    subcommand = arguments.subcommand.replace('-', '_')
    subcommand_method = globals()['subcommand_' + subcommand]
    subcommand_method(arguments)


if __name__ == '__main__':
    main()
